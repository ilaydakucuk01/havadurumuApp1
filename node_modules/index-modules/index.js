#!/usr/bin/env node

const { asyncFn, promisify } = require("promise-toolbox");

const camelCase = require("lodash/camelCase");
const join = require("path").join;
const parse = require("path").parse;
const readdir = promisify(require("fs").readdir);
const stat = promisify(require("fs").stat);
const writeFile = promisify(require("fs").writeFile);

// ===================================================================

function _log() {
  for (let i = 0, n = arguments.length; i < n; ++i) {
    this.write(arguments[i]);
    this.write("\n");
  }
}

function log() {
  _log.apply(process.stdout, arguments);
}

function warn() {
  _log.apply(process.stderr, arguments);
}

// ===================================================================

const GENERATORS = (function () {
  const HEADER = [
    "//",
    "// This file has been generated by [index-modules](https://npmjs.com/index-modules)",
    "//",
    "",
  ];

  return {
    default: {
      init: function () {
        return HEADER.concat("const properties = {}", "");
      },
      addModule: function (content, path, identifier) {
        content.push(
          "import * as _" + identifier + " from " + JSON.stringify(path),
          'if ("default" in _' +
            identifier +
            ") properties." +
            identifier +
            " = { enumerable: true, get: () => _" +
            identifier +
            ".default }",
          "export { _" + identifier + " as " + identifier + " }",
          ""
        );
      },
      compile: function (content) {
        content.push("export default Object.create(null, properties)", "");
        return content.join("\n");
      },
    },
    cjsLazy: {
      init: function () {
        return HEADER.concat(
          "var d = Object.defineProperty",
          "function de (o, n, v) {", // define enumerable property
          "  d(o, n, { enumerable: true, value: v })",
          "  return v",
          "}",
          "function dl (o, n, g, a) {", // define lazy property
          "  d(o, n, { configurable: true, enumerable: true, get: function () { return de(o, n, g(a)) } })",
          "}",
          "function r (p) {", // require module (with ES2015 compat)
          "  var v = require(p)",
          "  return v && v.__esModule ? v",
          "    : typeof v === 'object' || typeof v === 'function' ? Object.create(v, { default: { enumerable: true, value: v } })",
          "    : { default: v }",
          "}",
          "function e (p, i) {", // export a module
          "  dl(defaults, i, function () {",
          "    return exports[i].default",
          "  })",
          "  dl(exports, i, r, p)",
          "}",
          "",
          "d(exports, '__esModule', { value: true })",
          "var defaults = de(exports, 'default', {})"
        );
      },
      addModule: function (content, path, identifier) {
        content.push(
          "e(" + JSON.stringify(path) + ", " + JSON.stringify(identifier) + ")"
        );
      },
      compile: function (content) {
        content.push("");
        return content.join("\n");
      },
    },
  };
})();

// ===================================================================

let generator;

const indexModules = asyncFn(function* (dir, importExt, indexFile) {
  const formatPath =
    importExt === false
      ? (parts) => parts.name
      : importExt === ""
      ? (parts) => parts.name + parts.ext
      : (parts) => parts.name + "." + importExt;

  const content = generator.init();

  const entries = yield readdir(dir);
  const index = join(dir, indexFile);
  try {
    yield Promise.all(
      entries.map(
        asyncFn(function* (entry) {
          if (entry === indexFile || entry[0] === "." || entry[0] === "_") {
            return;
          }
          try {
            const stats = yield stat(join(dir, entry));
            let identifier, path, parts;
            if (stats.isDirectory()) {
              identifier = path = entry;
              path = join(entry, indexFile);
            } else if (
              stats.isFile() &&
              [".coffee", ".js", ".mjs"].includes((parts = parse(entry)).ext)
            ) {
              identifier = parts.name;
              path = formatPath(parts);
            } else {
              return;
            }

            generator.addModule(content, "./" + path, camelCase(identifier));
          } catch (error) {
            warn("failed to read " + dir, error);
          }
        })
      )
    );
    yield writeFile(index, generator.compile(content)).then(
      function () {
        log("index generated " + index);
      },
      function (error) {
        warn("failed to write " + index, error);
      }
    );
  } catch (error) {
    warn("failed to generate " + index, error);
  }
});

const findDirs = asyncFn(function* (dir, ...opts) {
  try {
    const entries = yield readdir(dir);
    return Promise.all(
      entries.map(
        asyncFn(function* (entry) {
          const path = join(dir, entry);
          try {
            const stats = yield stat(path);
            if (stats.isDirectory()) {
              return findDirs(path);
            }
            if (entry === ".index-modules" && stats.isFile()) {
              return indexModules(dir, ...opts);
            }
          } catch (error) {
            warn("cannot read " + entry, error);
          }
        })
      )
    );
  } catch (error) {
    warn("failed to read " + dir, error);
  }
});

// ===================================================================

(function main(args) {
  if (!args.length) {
    return log(
      "Usage: index-modules [--cjs-lazy] <dir>...",
      "       index-modules [--cjs-lazy] --auto <root dir>"
    );
  }

  const opts = require("getopts")(args, {
    boolean: ["auto", "cjs-lazy"],
    default: {
      "index-file": "index.js",
    },
    string: ["index-file", "import-ext"],
  });

  generator = opts["cjs-lazy"] ? GENERATORS.cjsLazy : GENERATORS.default;

  const importExt = opts["import-ext"];
  const indexFile = opts["index-file"];
  if (opts.auto) {
    findDirs(opts._[0], importExt, indexFile);
  } else {
    Promise.all(opts._.map((dir) => indexModules(dir, importExt, indexFile)));
  }
})(process.argv.slice(2));
